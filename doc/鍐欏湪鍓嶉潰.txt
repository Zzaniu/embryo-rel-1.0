	既然你都已经下载了源代码，何不先仔细读读这些文档，掌握embryo的大概脉络？
	当你能够通过vim或者其他任何编辑器查看到这个文件内容，而不是对看到一堆乱码而感到一筹莫展的时候，说明你还是个有脑子的程序员。并且如果刚好你也对硬件或者引导有足够的好奇心的话，那么embryo将非常适合你。
	embryo并不是完全原创的一个引导，甚至说它就是PMON（请自行百度PMON是什么）也不为过。embryo设计基本都是参考PMON来的，然而也不是说它对于embryo一点改进也没有，出于作者写embryo的初衷，embryo具有很强的代码可读性，这些可读性源于作者在对PMON代码的理解基础上，加以简化和模块化的结果。想学习一个bootloader（当然，也包括其他大型软件），最好的办法就是学习一个已有的开源代码，并融入自己的理解写一个新的甚至可以替代它的东西出来。在编写这个新的boot过程中，你将对宿主机有更深刻的认识，在满足你对内核引导流程的好奇心的同时，还能让你在实现其他大型软件的过程中获益匪浅。
	不推荐一上来就直接阅读代码，建议先阅读几个比较重要的文档《概述》、《功能实现一览》、《源码目录说明》，这个三个文档最起码能让你知道你正在看的到底是个什么玩意儿， 然后建议稍微阅读下Makefile、config.mk，为什么要阅读这些跟构建工程相关的文件呢？一个很重要的理由是，它能帮助你找到整个软件的入口点在哪。并且，在一个很大型的软件中，往往一个函数在多个文件中都有定义，而根据Makefile能让你准确找到实际使用的那个函数定义。在读到自己不明白的地方，建议回头看看源代码中给出的注释以及每个功能模块对应的设计文档。如果你是个对于目前平台技术还不甚了解的菜鸟程序员，可以先通读《参考书籍》中提到的技术资料。对于目前代码中设计的有瑕疵或者有潜在问题的代码，作者会在对应代码处标记"bad code"字样，用来表示这块代码已经意识到了自己的问题，会在以后的某个版本中对此进行修正。此外，关于继承自PMON代码中的连笔者也没有理解的奇怪代码，作者也会在注释中尽量给出自己的猜测和理解，也强烈希望知道答案的大牛能第一时间联系作者。如果你发现了代码中的某个bug，先不要着急，先看看《遗留问题》或者《bug列表》中是否已经记录你发现的bug，如果没有，欢迎发送bug到作者的邮箱875421872@qq.com。当然，对于设计实现上有更好的思路和想法也欢迎一起交流学习。至于对embryo今后开发计划以及作者后续作品感兴趣的同学，可以阅读《后续开发计划》一文。
	最后，非常感谢您的下载和阅读，那是对embryo的最好认可。



